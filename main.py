import pandas as pd
import json
import random

# Carrega os dados das pe√ßas do arquivo JSON externo
def carregar_dados():
    try:
        with open('pecas.json', 'r', encoding='utf-8') as arquivo:
            dados = json.load(arquivo)
        return dados
    except FileNotFoundError:
        print("Arquivo JSON n√£o encontrado. Verifique o caminho e o nome do arquivo.")
        return {}
    except json.JSONDecodeError as e:
        print(f"Erro ao decodificar o JSON: {e}")
        return {}

# Cria um dataframe a partir dos dados
def criar_dataframe(dados):
    return pd.DataFrame(dados).T

# Sa√∫da o usu√°rio e coleta as informa√ß√µes iniciais
def saudacao():
    print("\n" + "="*80)
    print("üöó üå±  Bem-vindo a SustenRace, promovendo a inova√ß√£o na F√≥rmula E! üå± üöó")
    print("="*80 + "\n")
    
    nome = input("Por favor, insira seu nome: ")
    while not nome.isalpha():
        print("‚ùå Nome inv√°lido! Por favor, insira um nome v√°lido.")
        nome = input("Por favor, insira seu nome: ")

    idade = verificacaonumero("Agora, nos informe sua idade: ")
    
    print(f"\nüåü Ol√° {nome}, obrigado por participar! Vamos come√ßar sua experi√™ncia na SustenRace.")
    return nome, idade

# Exibe as pe√ßas dispon√≠veis
def exibir_pecas_disponiveis(dados):
    print("\nüìä Aqui est√° uma vis√£o geral das pe√ßas do carro da Mahindra:")
    print("-"*40)
    for index, peca in enumerate(dados.keys()):
        print(f"{index + 1}. {peca}")
    print("-"*40)

# Exibe a descri√ß√£o da pe√ßa escolhida
def exibir_descricao_peca(dados, escolha):
    pecas = list(dados.keys())
    peca_escolhida = pecas[escolha - 1]
    descricao = dados[peca_escolhida]

    print(f"\nüîß Pe√ßa: {peca_escolhida}")
    print("-"*40)
    for chave, valor in descricao.items():
        if pd.notna(valor):
            print(f"{chave.capitalize()}: {valor}")
    print("-"*40)

# Promove a F√≥rmula E com uma intera√ß√£o opcional
def promover_formula_e():
    print("\nüöÄ Vamos aprender mais sobre a Mahindra e a F√≥rmula E!")
    interagir = forca_opcao(['sim', 'n√£o'], "\nQuer saber mais sobre como a Mahindra inova na F√≥rmula E? ")
    if interagir == 'sim':
        print("\nA Mahindra est√° liderando a revolu√ß√£o el√©trica com inova√ß√µes que est√£o mudando o cen√°rio do automobilismo.")
        print("üåç Participe das nossas iniciativas e ajude a construir o futuro da mobilidade sustent√°vel!")

# For√ßa a escolha correta de op√ß√µes
def forca_opcao(lista_opcoes, msg):
    opcao = input(f"{msg} ({'/'.join(lista_opcoes)}): ").lower()
    while opcao not in lista_opcoes:
        print(f"‚ùå Op√ß√£o inv√°lida! Escolha uma das op√ß√µes: {', '.join(lista_opcoes)}")
        opcao = input(f"{msg} ({'/'.join(lista_opcoes)}): ").lower()
    return opcao

# Verifica se a entrada √© um n√∫mero v√°lido
def verificacaonumero(msg):
    while True:
        verificacao = input(msg)
        if verificacao.isnumeric() and int(verificacao) > 0:
            return int(verificacao)
        else:
            print("‚ùå Valor inv√°lido. Por favor, digite sua idade novamente.")

# Pergunta ao usu√°rio se deseja ver as pe√ßas e exibe a descri√ß√£o
def questionario(dados):
    while True:
        resposta = forca_opcao(['sim', 'n√£o'], "\nVoc√™ gostaria de ver as pe√ßas do carro da Mahindra? ")
        if resposta == 'sim':
            exibir_pecas_disponiveis(dados)
            escolha = verificacaonumero("\nDigite o n√∫mero da pe√ßa que deseja ver (0 para sair): ")
            if escolha == 0:
                print("Saindo...")
                break
            elif 1 <= escolha <= len(dados):
                exibir_descricao_peca(dados, escolha)
            else:
                print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
        elif resposta == 'n√£o':
            break

# Simula a montagem de um carro da F√≥rmula E
def simulador_montagem(dados):
    print("\n--- Simulador de Montagem de Carro ---")
    
    pecas_necessarias = ["Chassi", "Motor", "Suspens√£o", "Bateria", "Freios"]
    montagem = {}
    
    for peca in pecas_necessarias:
        print(f"\nEscolha uma {peca} para o seu carro:")
        pecas_disponiveis = [key for key in dados.keys() if peca.lower() in key.lower()]
        
        if pecas_disponiveis:
            for index, item in enumerate(pecas_disponiveis):
                print(f"{index + 1}. {item}")
                
            escolha = verificacaonumero("\nDigite o n√∫mero da pe√ßa escolhida: ")
            if 1 <= escolha <= len(pecas_disponiveis):
                peca_escolhida = pecas_disponiveis[escolha - 1]
                montagem[peca] = dados[peca_escolhida]
            else:
                print(f"‚ùå Escolha inv√°lida para {peca}.")
        else:
            print(f"‚ùå Pe√ßas de {peca} n√£o dispon√≠veis.")

    nome_carro = input("\nEscolha um nome para o seu carro: ")
    velocidade_maxima = random.randint(250, 350)
    
    print(f"\n‚úÖ Montagem completa! Aqui est√° o resumo do seu carro '{nome_carro}':")
    for peca, descricao in montagem.items():
        print(f"\nüîß {peca}:")
        for chave, valor in descricao.items():
            if pd.notna(valor):
                print(f"{chave.capitalize()}: {valor}")
            else:
                print(f"{chave.capitalize()}: Informa√ß√£o indispon√≠vel")
    
    print(f"\nüöÄ Velocidade M√°xima Estimada: {velocidade_maxima} km/h")

# Fun√ß√£o principal
def main():
    dados = carregar_dados()
    
    if not dados:
        return
    
    df = criar_dataframe(dados)

    nome, idade = saudacao()
    questionario(dados)

    simular = forca_opcao(['sim', 'n√£o'], "\nVoc√™ gostaria de realizar a simula√ß√£o de montagem de um carro da Mahindra? ")
    if simular == 'sim':
        simulador_montagem(dados)

    promover_formula_e()
    print("\n‚ú® Obrigado por participar da experi√™ncia SustenRace! Continue inovando! üåç")

if __name__ == "__main__":
    main()
